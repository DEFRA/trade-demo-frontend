services:

  redis:
    image: redis:7.2.3-alpine3.18
    ports:
      - '6379:6379'
    restart: always
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - cdp-tenant

  defra-id-stub:
    image: defradigital/cdp-defra-id-stub:latest
    ports:
      - '3200:3200'
    depends_on:
      - redis
    environment:
      PORT: 3200
      # Allow OAuth callbacks to the correct endpoint
      REDIRECT_URLS: http://localhost:3000/auth/callback
      # Stub expects OIDC_ prefixed environment variables
      OIDC_CLIENT_ID: ${DEFRA_ID_CLIENT_ID:-test-client}
      OIDC_CLIENT_SECRET: ${DEFRA_ID_CLIENT_SECRET:-test-secret}
      SERVICE_ID: ${DEFRA_ID_SERVICE_ID:-test-service}
      # Use single instance for local development
      USE_SINGLE_INSTANCE_CACHE: true
      # Use memory cache not (or redis)
      SESSION_CACHE_ENGINE: redis
    networks:
      - cdp-tenant
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '-f',
          'http://localhost:3200/cdp-defra-id-stub/.well-known/openid-configuration'
        ]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s

  localstack:
    profiles: ["mongo", "postgres"]
    image: localstack/localstack:3.0.2
    ports:
      - '4566:4566' # LocalStack Gateway
      - '4510-4559:4510-4559' # external services port range
    env_file:
      - 'compose/aws.env'
    environment:
      DEBUG: ${DEBUG:-1}
      LS_LOG: WARN # Localstack DEBUG Level
      SERVICES: s3,sqs,sns,firehose
      LOCALSTACK_HOST: 127.0.0.1
    volumes:
      - localstack-data:/var/lib/localstack
      - ./compose/start-localstack.sh:/etc/localstack/init/ready.d/start-localstack.sh
    healthcheck:
      test: ['CMD', 'curl', 'localhost:4566']
      interval: 5s
      timeout: 5s
      start_period: 5s
      retries: 3
    restart: always
    networks:
      - cdp-tenant

################################################################################
# MongoDB Backend Stack
################################################################################

  mongodb:
    profiles: ["mongo"]
    image: mongo:6.0.13
    networks:
      - cdp-tenant
    volumes:
      - mongodb-data:/data
    restart: always
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', 'db.adminCommand("ping")']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  trade-demo-backend:
    profiles: ["mongo"]
    build:
      context: ../trade-demo-backend
      target: development
    ports:
      - '8085:8085'
    depends_on:
      mongodb:
        condition: service_healthy
    env_file:
      - 'compose/aws.env'
    environment:
      PORT: 8085
      MONGO_URI: mongodb://mongodb:27017
      MONGO_DATABASE: trade-demo-backend
      ENVIRONMENT: local
      LOG_LEVEL: DEBUG
      LOCALSTACK_ENDPOINT: http://localstack:4566
      AWS_REGION: eu-west-2

      # MongoDB local overrides (standalone instance, no SSL)
      MONGO_READ_PREFERENCE: primary
      SPRING_DATA_MONGODB_SSL_ENABLED: false

      # Spring profile (dev = exposes debugging actuator endpoints)
      SPRING_PROFILES_ACTIVE: dev
    networks:
      - cdp-tenant
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8085/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

################################################################################
# PostgreSQL Backend Stack
################################################################################

  postgres:
    profiles: ["postgres"]
    image: postgres:16-alpine
    ports:
      - '5432:5432'
    networks:
      - cdp-tenant
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: trade_demo_postgres_backend
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      start_period: 10s
      retries: 3

  trade-demo-postgres-backend:
    profiles: ["postgres"]
    build:
      context: ../trade-demo-postgres-backend
      target: development
    ports:
      - '8085:8085'
      - '5005:5005' # Java debug port
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - 'compose/aws.env'
    environment:
      # Server
      PORT: 8085

      # Service Identity
      SERVICE_VERSION: 0.0.0-local
      ENVIRONMENT: local

      # PostgreSQL
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: trade_demo_postgres_backend
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_SSL: false
      DB_SSL_MODE: disable

      # AWS (via LocalStack)
      LOCALSTACK_ENDPOINT: http://localstack:4566
      AWS_REGION: eu-west-2

      # Logging
      LOG_LEVEL: DEBUG

      # Metrics (disabled locally)
      ENABLE_METRICS: false

      # Spring profile (dev = exposes debugging actuator endpoints)
      SPRING_PROFILES_ACTIVE: dev
    networks:
      - cdp-tenant
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8085/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

################################################################################

volumes:
  localstack-data:
  mongodb-data:
  postgres-data:

networks:
  cdp-tenant:
    driver: bridge
